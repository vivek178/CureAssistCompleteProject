stages:
  #  - build
  #  - test
   - dockerize
   - deploy
# build-stage:
#    stage: build
#    image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine3.9
#    script:
#      - dotnet restore
#      - dotnet build
#      - dotnet publish
#    artifacts:
#       paths:
#         - Patient-Portal/bin/Debug/netcoreapp2.2/publish
#    tags:
#       - immersive-cgi-w7-dotnet
# test-stage:
#    stage: test
#    image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine3.9
#    script:
#      - dotnet test Patient-Portal/Patient-Portal.csproj
#    tags:
#      - immersive-cgi-w7-dotnet
dockerize-stage:
   stage: dockerize
   image: docker
   script:
     - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
     - docker build -t teamcureassist/patient-microservice-backend:${CI_COMMIT_SHORT_SHA} .
     - docker tag teamcureassist/patient-microservice-backend:${CI_COMMIT_SHORT_SHA} teamcureassist/patient-microservice-backend:latest
     - docker push teamcureassist/patient-microservice-backend:${CI_COMMIT_SHORT_SHA}
     - docker push teamcureassist/patient-microservice-backend
   tags:
     - immersive-cgi-w7-dotnet
deploy-stage:
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster k8s --server="${SERVER}"
    - kubectl config set clusters.k8s.certificate-authority-data ${CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials gitlab --token="${USER_TOKEN}"
    - kubectl config set-context default --cluster=k8s --user=gitlab
    - kubectl config use-context default
    - sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" kube-manifest.yaml
    - kubectl -n ${NAMESPACE} apply -f kube-manifest.yaml
  tags:
    - immersive-cgi-w7-dotnet